Problem Statement :-

Function - sortAlternateSubarrays() in DC (Daily Challenge) in SkillRack in C - Programming

Code :-

int is_within_bounds(int index , int N){
    
    return ((0 <= index) && (index <= N));
}

void merge_sort(int left_pointer , int right_pointer , int *array){
    
    if(left_pointer >= right_pointer){
        return ;
    }
    
    int middle_pointer = (left_pointer + ((right_pointer - left_pointer) / 2));
    
    merge_sort(left_pointer , middle_pointer , array);
    
    merge_sort((middle_pointer + 1) , right_pointer , array);
    
    int temp_array[(right_pointer - left_pointer + 1)];
    
    int temp_array_index = 0;
    
    int pointer_1 = left_pointer;
    
    int pointer_2 = (middle_pointer + 1);
    
    while((is_within_bounds(pointer_1 , middle_pointer)) && (is_within_bounds(pointer_2 , right_pointer))){
        temp_array[temp_array_index++] = (array[pointer_1] <= array[pointer_2]) ? (array[pointer_1++]) : (array[pointer_2++]);
    }
    
    while(is_within_bounds(pointer_1 , middle_pointer)){
        temp_array[temp_array_index++] = array[pointer_1++];
    }
    
    while(is_within_bounds(pointer_2 , right_pointer)){
        temp_array[temp_array_index++] = array[pointer_2++];
    }
    
    for(int index_1 = left_pointer , index_2 = 0 ; (index_1 <= right_pointer) ; index_1++ , index_2++){
        array[index_1] = temp_array[index_2];
    }
}

void sortAlternateSubarrays(int N , int *array , int K){
    
    for(int i = 0 ; (i < N) ; i += (K * 2)){
        
        merge_sort(i , (i + K - 1) , array);
    }
}
